#!/bin/bash
#
# A simple framework for regression testing the convert script
#
# Returns the number of failed test cases.
#
# Format of a test:
#     test 'command' 'input file name' 'expected output file name' 'expected std error file name'
#
# Some example test cases are given. You should add more test cases.
#
# CAUTION: Uses temporary files named test_err.txt and test_out.txt
# 
# Sam Scott, McMaster University, 2024
#
declare -i tc=0
declare -i fails=0

############################################
# Run a single test. Runs a given command 
# to check the return value, stdout, and stderr
#
# GLOBALS: tc, fails
# PARAMS: $1 = command
#         $2 = input file name
#         $3 = expected std output file name
#         $4 = expected std error file name
#
# Assumes return value should be 0 if the
# std error file is empty. Otherwise it 
# should be 1.
#
# OUTPUTS: An pass/fail report showing the
# difference between expected and actual
# output on a failure (diff command)
############################################
test() {
    tc=tc+1

    local COMMAND=$1
    local INP=$2
    local EX_OUT=$3
    local EX_ERR=$4 

    EX_RET=1
    if [[ $(cat $EX_ERR) = "" ]]; then
        EX_RET=0
    fi
    $COMMAND < $INP > test_out.txt 2> test_err.txt
    RET=$?
    if [[ $RET != $EX_RET ]]; then
        echo "TC $tc Failed"
        echo "Returned $RET"
        echo "-----------"
        fails=$fails+1
        return
    fi
    DIFF=$(diff test_out.txt $EX_OUT)
    if [[ $DIFF != '' ]]; then
        echo "TC $tc Failed Standard Output"
        echo "$DIFF"
        echo "-----------"
        fails=$fails+1
        return
    fi
    DIFF=$(diff test_err.txt $EX_ERR)
    if [[ $DIFF != '' ]]; then
        echo "TC $tc Failed Standard Error"
        echo "$DIFF"
        echo "-----------"
        fails=$fails+1
        return
    fi

    echo "TC $tc Passed"
}

# Example test cases (replace `./convert` with the actual command to test your convert program)
#conversion with regular base
test './ctest' 'inp1.txt' 'ex_out1.txt' 'empty.txt'
test './ctest -b 2' 'inp2.txt' 'ex_out2.txt' 'empty.txt'
test './ctest -a' 'empty.txt' 'empty.txt' 'usage.txt'

#conversion with a specified base of binary
test './ctest -b 2' 'inp2.txt' 'ex_out2.txt' 'empty.txt'
#range conversion in base 10
test './ctest -b 10 -r 1 5' 'empty.txt' 'ex_out3_range10.txt' 'empty.txt'
#base specified out of range
test './ctest -b 40' 'empty.txt' 'empty.txt' 'usage.txt'
#non-integer input
test './ctest -b 16' 'non_int.txt' 'empty.txt' 'error_non_int.txt'
#help flag used 
test './ctest --help' 'empty.txt' 'help.txt' 'empty.txt'
#empty input on a base conversion
test './ctest -b 8' 'empty.txt' 'empty.txt' 'empty.txt'
#unrecognized flags
test './ctest -z' 'empty.txt' 'empty.txt' 'usage.txt'
#no input base conversion
test './ctest -b 8' 'empty.txt' 'empty.txt' 'empty.txt'
#testing for a missing value after -b 
test './ctest -b' 'empty.txt' 'empty.txt' 'usage.txt'
#missing values after -r like without start and finish
test './ctest -r' 'empty.txt' 'empty.txt' 'usage.txt'
#range starts higher than the end
test './ctest -b 10 -r 10 5' 'empty.txt' 'empty.txt' 'empty.txt'
#testing the functionality of the -b taking only the last one
test './ctest -b 8 -b 16' 'inp1.txt' 'ex_out1_base16.txt' 'empty.txt'
#testing how many -r values the utility can take, and only takes the last one
test './ctest -r 1 5 -r 6 10' 'empty.txt' 'ex_out1_range6_10.txt' 'empty.txt'
#testing negative values for the start and finish for the range
test './ctest -b 16 -r -5 -1' 'empty.txt' 'ex_out_neg5_neg1.txt' 'empty.txt'
#teting if the range start and finish are the same
test './ctest -b 16 -r 8 8' 'empty.txt' 'ex_out_single_8.txt' 'empty.txt'
#no range and no input
test './ctest -b 16' 'empty.txt' 'empty.txt' 'empty.txt'
#Handling conversion in standard input with non-numerical inputs
test './ctest -b 10' 'non_numeric.txt' 'empty.txt' 'error_non_int.txt'



# clean up
rm test_err.txt test_out.txt

# return code
exit $fails
